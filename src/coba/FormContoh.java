package coba;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.stream.IntStream;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import modul.Global;
import modul.Sqlmodul;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.NoDataException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.linear.MatrixUtils;

/**
 *
 * @author RAMPA
 */
public class FormContoh extends javax.swing.JFrame {

    private final Global g = new Global();
    private final Sqlmodul sql = new Sqlmodul();
    private SupportVectorMachines svm = null;

    private double[][][] TRAINING_DATA = {{
        {9.123456, 3.123456}, {+1}},
    {{9.123456, 5.123456}, {+1}},
    {{5.123456, 5.123456}, {-1}},
    {{8.123456, 6.654321}, {+1}},
    {{4.654321, 4.123456}, {-1}},
    {{2.123456, 4.123456}, {-1}},
    {{9.123456, 7.123456}, {+1}},
    {{4.123456, 4.654321}, {-1}},
    {{8.654321, 2.123456}, {+1}},
    {{2.123456, 2.123456}, {-1}},
    {{3.123456, 3.123456}, {-1}},
    {{8.654321, 4.123456}, {+1}},
    {{7.123456, 6.123456}, {+1}},
    {{4.123456, 7.123456}, {-1}},
    {{6.923456, 4.623456}, {-1}},
    {{8.123456, 5.123456}, {+1}},
    {{3.123456, 4.123456}, {-1}}
    };

    double ZERO = 0.000000009;

    public FormContoh() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn1 = new javax.swing.JButton();
        btnFromCSV = new javax.swing.JButton();
        btnCSVdb = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnTrain = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        btnKlasifikasi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn1.setText("Read From Array");
        btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1ActionPerformed(evt);
            }
        });

        btnFromCSV.setText("2. Insert");
        btnFromCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFromCSVActionPerformed(evt);
            }
        });

        btnCSVdb.setText("1. Read CSV File");
        btnCSVdb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCSVdbActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Max (X)", "Min (X)", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnTrain.setText("3. Train Data");
        btnTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTrainActionPerformed(evt);
            }
        });

        btnKlasifikasi.setText("4. Klasifikasi");
        btnKlasifikasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKlasifikasiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCSVdb, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFromCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTrain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnKlasifikasi)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCSVdb)
                    .addComponent(btnFromCSV)
                    .addComponent(btnTrain)
                    .addComponent(btnKlasifikasi))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1ActionPerformed

        System.out.println(TRAINING_DATA.length);
        System.out.println("============================");
        double[][] xArray = new double[TRAINING_DATA.length][2];
        double[][] yArray = new double[TRAINING_DATA.length][1];
        for (int i = 0; i < TRAINING_DATA.length; i++) {
            xArray[i][0] = TRAINING_DATA[i][0][0];
            xArray[i][1] = TRAINING_DATA[i][0][1];
            yArray[i][0] = TRAINING_DATA[i][1][0];

            System.out.println(xArray[i][0] + " " + xArray[i][1] + " " + yArray[i][0]);
        }

    }//GEN-LAST:event_btn1ActionPerformed

    private void btnFromCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFromCSVActionPerformed
        try {
            sql.dml("delete from log");
            System.out.println(jTable1.getRowCount());

            Connection connection = sql.getKoneksi();
            String strsql = "insert into log (x,y,nilai) values(?,?,?);";
            PreparedStatement pst = connection.prepareStatement(strsql);

            for (int i = 0; i < jTable1.getRowCount() - 1; i++) {
                String x = jTable1.getValueAt(i, 0).toString();
                String y = jTable1.getValueAt(i, 1).toString();
                String status = jTable1.getValueAt(i, 2).toString();

                pst.setString(1, x);
                pst.setString(2, y);
                pst.setString(3, status);
                pst.addBatch();
            }

            pst.executeBatch();
            System.out.println("Data tersimpan");

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_btnFromCSVActionPerformed

    private void btnCSVdbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCSVdbActionPerformed
        JFileChooser fileopen = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Text/CSV file", "txt", "csv");
        fileopen.addChoosableFileFilter(filter);
        int ret = fileopen.showDialog(null, "Choose file");		// Open File
        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileopen.getSelectedFile();
            try {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                BufferedReader br = new BufferedReader(new FileReader(file));
                String line;
                int row = 0;
                while ((line = br.readLine()) != null) {
                    String[] arr = line.split(",");
                    model.addRow(new Object[0]);
                    model.setValueAt(arr[0], row, 0);
                    model.setValueAt(arr[1], row, 1);
                    model.setValueAt(arr[2], row, 2);
                    row++;
                }
                br.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnCSVdbActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) {
            String a = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
            System.out.println(a);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTrainActionPerformed
        jProgressBar1.setIndeterminate(true);
        ProgresBarClass runSimpan = new ProgresBarClass();
        runSimpan.execute();
    }//GEN-LAST:event_btnTrainActionPerformed

    private void btnKlasifikasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKlasifikasiActionPerformed
        try {
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnKlasifikasiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormContoh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormContoh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormContoh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormContoh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormContoh().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn1;
    private javax.swing.JButton btnCSVdb;
    private javax.swing.JButton btnFromCSV;
    private javax.swing.JButton btnKlasifikasi;
    private javax.swing.JButton btnTrain;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void displayInfoTables(double[][] xArray, double[][] yArray) {
        System.out.println("Support Vector | label | alpha");
        IntStream.range(0, 50).forEach(i -> System.out.print("-"));
        System.out.println();
        for (int i = 0; i < xArray.length; i++) {
            if (svm.getAlpha().getData()[i][0] > ZERO && svm.getAlpha().getData()[i][0] != SupportVectorMachines.C) {
                StringBuffer ySB = new StringBuffer(String.valueOf(yArray[i][0]));
                ySB.setLength(5);
                System.out.println(Arrays.toString(xArray[i]) + " | " + ySB + " | "
                        + new String(String.format("%.10f", svm.getAlpha().getData()[i][0])));
            }
        }
        System.out.println("\n             wT              |  b  ");
        IntStream.range(0, 50).forEach(i -> System.out.print("-"));
        System.out.println();
        System.out.println("<" + (new String(String.format("%.9f", svm.getW().getData()[0][0])) + ", "
                + new String(String.format("%.9f", svm.getW().getData()[1][0]))) + ">   | " + svm.getB());
    }

    private void coba() {
        try {
            int length = Integer.parseInt(sql.baca("select count(*) as jml from log;"));
            System.out.println("Traing Data " + length);
            System.out.println("============================");
            double[][] xArray = new double[length][2];
            double[][] yArray = new double[length][1];

            String[][] dataDB = sql.baca_array("select x, y, nilai from log", length, 3);

            for (int i = 0; i < length; i++) {
                xArray[i][0] = Double.parseDouble(dataDB[i][0]);
                xArray[i][1] = Double.parseDouble(dataDB[i][1]);
                yArray[i][0] = Double.parseDouble(dataDB[i][2]);

                System.out.println(xArray[i][0] + " " + xArray[i][1] + " " + yArray[i][0]);
            }

            svm = new SupportVectorMachines(MatrixUtils.createRealMatrix(xArray), MatrixUtils.createRealMatrix(yArray));
            displayInfoTables(xArray, yArray);

        } catch (NumberFormatException e) {
            System.out.println(e.getMessage());
        }
    }

    private void handleCommandLine() throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        while (true) {
            System.out.println("\n> to classify 1 , 2 atau 3 :");
            String[] values = (bufferedReader.readLine()).split(" ");
            if (values[0].equals("exit")) {
                System.exit(0);
            } else {
                try {
                    System.out.println(svm.classify(
                            MatrixUtils.createRealMatrix(new double[][]{{Double.valueOf(values[0]), Double.valueOf(values[1])}})));
                } catch (NumberFormatException | DimensionMismatchException | NoDataException | NullArgumentException e) {
                    System.out.println("invalid input");
                }
            }
        }
    }

    private class ProgresBarClass extends SwingWorker<String, Void> {

        @Override
        protected void done() {
            jProgressBar1.setIndeterminate(false);
        }

        @Override
        protected String doInBackground() {
            String hasil = "sukses";
            try {
                coba();
            } catch (Exception e) {
                hasil = e.getMessage();
            }
            return hasil;
        }
    }
}
